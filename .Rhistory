library(forecast)
library(smooth)
cif_df = read.csv(file = "cif-dataset.txt", sep = ';', header = FALSE)
cif_df_results=read.csv(file="cif-results-dataset.txt",sep=';',header = FALSE)
names(cif_df)[4:ncol(cif_df)] = paste('x', (1:(ncol(cif_df) - 3)), sep =
'_')
names(cif_df)[1] = "Series"
names(cif_df)[2] = "maxPredHorizon"
cif_df_12 = cif_df[cif_df$maxPredHorizon == 12, ]
#################################################
cif_df_results <- cif_df_results[,-1]
cif_df_results  <- cif_df_results [rowSums(is.na(cif_df_results )) == 0,]
predicion_horizon <- 13
sMAPE_mean_12 = NULL
sMAPE_median_12 = NULL
MASE_mean_12 = NULL
MASE_median_12 = NULL
for (idr in 1:nrow(cif_df_12)) {
final_rolling_prediction_vector = NULL
final_rolling_actual_vector = NULL
final_rolling_naive_vector = NULL
insample_error = NULL
print(paste0("Timeseries-->", idr ) )
oneLine_training_df = cif_df_12[idr, ]
y_train = as.numeric(oneLine_training_df[4:(ncol(oneLine_training_df))])
y_train =  y_train[!is.na(y_train)]
train_length = length(y_train)
oneLine_test_df = cif_df_results[idr, ]
y_test = as.numeric(oneLine_test_df[1:(ncol(oneLine_test_df))])
test_length = length(y_test)
y_series = c(y_train,y_test)
for(index in 1 : (predicion_horizon-1) ){
if(index ==1){
time_seres <- y_series[1:((train_length+(index-1)))]
ets_model_12 = baggedETS(ts(time_seres, frequency = 12))
ets_forecast = forecast(ets_model_12, h= 12)
ets_predict = as.numeric(ets_forecast$mean)
ets_predict = ets_predict[1:(predicion_horizon-index)]
ets_naive = (naive(time_seres, h=(predicion_horizon-index)))
ets_naive = as.numeric(ets_naive$mean)
ets_actual = tail(y_series,(predicion_horizon-index))
insample_error = mean(abs(diff(time_seres, lag=12,differences=1)))
}else{
time_seres <- y_series[1:((train_length+(index-1)))]
#ets_model = ets(ts(time_seres, frequency = 12), model = ets_model_12, use.initial.values = TRUE)
ets_model = baggedETS(ts(time_seres, frequency = 12))
ets_forecast = forecast(ets_model, h= 12)
ets_predict = as.numeric(ets_forecast$mean)
ets_predict = ets_predict[1:(predicion_horizon-index)]
ets_naive = (naive(time_seres, h=(predicion_horizon-index)))
ets_naive = as.numeric(ets_naive$mean)
ets_actual = tail(y_series,(predicion_horizon-index))
}
if(is.null(final_rolling_prediction_vector)){
final_rolling_prediction_vector <- ets_predict
}else{
final_rolling_prediction_vector <- c(final_rolling_prediction_vector, ets_predict)
}
if(is.null(final_rolling_actual_vector)){
final_rolling_actual_vector <- ets_actual
}else{
final_rolling_actual_vector <-c(final_rolling_actual_vector,ets_actual)
}
if(is.null(final_rolling_naive_vector)){
final_rolling_naive_vector <- ets_naive
}else{
final_rolling_naive_vector <-c(final_rolling_naive_vector,ets_naive)
}
}
sMAPE_error <- 2*abs(final_rolling_prediction_vector-final_rolling_actual_vector)/(abs(final_rolling_prediction_vector)+abs(final_rolling_actual_vector))
sMAPE_mean_12[idr] <- mean(sMAPE_error)
MASE_error <- MASE(final_rolling_actual_vector,final_rolling_prediction_vector,insample_error)
MASE_mean_12[idr] <- (MASE_error)
}
baggedETS()
?baggedETS
?ets
